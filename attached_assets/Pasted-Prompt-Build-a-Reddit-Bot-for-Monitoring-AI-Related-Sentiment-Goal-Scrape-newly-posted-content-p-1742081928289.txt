Prompt: Build a Reddit Bot for Monitoring AI-Related Sentiment
Goal:

Scrape newly posted content (posts and comments) on a specified list of subreddits.
Analyze each piece of text to determine:
If it contains negative sentiment about AI images or Google AI overview answers.
If it is relevant to my specific product or service (based on user-defined criteria).
Score each relevant piece of text on a scale from 1 to 10, with:
10 = Very high relevance (definitely worth replying to).
1 = Irrelevant or not worth replying to.
Retain only text that scores above 7 in a queue/list.
Provide a suggested reply that can be copied and pasted manually into Reddit under the AIBlock account (so we don’t violate Reddit’s spam or bot rules).
Include a button or link that directly opens the Reddit post/comment for easy manual posting.
1. Setup and Configuration
Reddit API Credentials

Obtain or verify OAuth credentials (client ID, client secret, user agent, redirect URI, etc.) from Reddit’s Developer Portal.
Store these credentials securely (e.g., using environment variables).
OpenAI (ChatGPT) API Credentials

Retrieve your API key from OpenAI.
Store it securely (environment variables or a configuration file).
List of Subreddits

A configurable list of subreddits (e.g., ["r/ArtificialIntelligence", "r/StableDiffusion", "r/MachineLearning"]) that the bot will monitor for new posts and comments.
Ensure the final app easily allows adding or removing subreddits.
2. Data Collection (Reddit Scraping)
Use a Reddit Wrapper (e.g., PRAW in Python or another similar library) to:

Continuously fetch or “stream” new posts in the chosen subreddits.
Also fetch or stream new comments on those posts.
Data Structure for Each Retrieved Post or Comment:

Unique ID (e.g., post_id or comment_id)
Subreddit name
Author name
Text content (title and body for posts; body for comments)
Timestamp
URL/permalink
Frequency of Checking:

Decide how often the bot checks each subreddit (e.g., every 60 seconds).
Consider using in-memory queues or a lightweight database (like SQLite, Postgres, or a NoSQL store) to store only what’s necessary.
3. Sentiment and Relevance Analysis
OpenAI (ChatGPT) or other NLP model calls to:

Check Sentiment: Is it negative or critical toward AI images, Google AI answers, or the user’s specific AI-related service?
Check Relevance: Determine if the text mentions or relates to the user’s product/offer. Possibly craft a system or few-shot prompt that guides the model:
System Prompt Example:
“You are an assistant that analyzes Reddit text for negativity toward AI images and Google AI overview answers. Identify negativity or criticism directed specifically at these AI products. Rate relevance from 1 to 10, where 10 is strongly related to our product. Provide a short snippet explaining why you gave that rating.”
Scoring Logic:

Combine negativity detection and product relevance to get a single integer score from 1 to 10.
If the user’s product is specifically mentioned → Score increases.
If there is direct negativity regarding AI images → Score increases in importance.
If text is irrelevant (e.g., random comment about politics) → Score near 1 or 2.
Only retain items with a score above 7 for manual review and replying.
Metadata Storage:

Store the score, relevant text snippet, and explanation in your local or remote data store.
This storage allows building a UI that displays the queue of potential comments/posts to reply to.
4. Generating the Suggested Reply
Dynamic Prompting to OpenAI:

For any post/comment with a score > 7:
Send context to ChatGPT:
Example:
css
Copy
Edit
"The following comment (or post) shows negativity toward AI images. 
 Our product is [PRODUCT NAME], which addresses [KEY POINTS]. 
 Please craft a courteous, factual, and helpful 1-2 sentence reply 
 to address their concerns."
Return the GPT-suggested reply.
Format the reply to be as concise and helpful as possible, abiding by each subreddit’s rules.
Store Suggested Reply so the user can copy and paste.

Link to Original Comment/Post:

Provide a direct URL or button that opens the specific Reddit thread or comment in a new browser tab/window for easy manual posting.
5. User Interface / Dashboard
Display Queue of Relevant Posts/Comments:

Show the text snippet.
Show the sentiment/relevance score.
Show the suggested reply generated by the AI.
Manual “Post Reply” Workflow:

A button next to each entry that:
Copies the AI reply to the clipboard.
Opens the Reddit post or comment in a new tab.
Minimizes risk of violating automatic spam detection or subreddit rules (since the user is posting manually).
Refresh or Auto-Update:

Refresh the queue in near real time (e.g., every few minutes).
Discard or archive items that are older than a certain timeframe or have already been addressed.
Settings Panel:

Subreddit management (add/remove subreddits).
Throttle or frequency of checks.
Score threshold (e.g., 7).
Optionally, a place to adjust the exact system prompt used for the AI.